<?php

namespace App\Models;

use App\Enums\PageConnectionStatus;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\PageConnection
 *
 * @property int $id
 * @property int|null $page_id
 * @property int|null $priority
 * @property int|null $type
 * @property string|null $title
 * @property string|null $value
 * @property int|null $status
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \App\Models\Page|null $page
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection query()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection wherePageId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection wherePriority($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection whereTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\PageConnection whereValue($value)
 * @mixin \Eloquent
 */
class PageConnection extends Model
{
    protected $table = 'page_connections';

    protected $fillable = [
        'page_id',
        'priority',
        'type',
        'title',
        'value',
        'status'
    ];

    use SoftDeletes;

    //

    protected static function booted()
    {
        self::creating(function($pageConnection){
            $pageConnection->status = PageConnectionStatus::ENABLE;
            $pageConnection->priority = rand(0, 100);
        });

        parent::booted(); // TODO: Change the autogenerated stub
    }

    // relationships method

    public function page()
    {
        return $this->belongsTo(Page::class);
    }

    // table property getter

    public function getPageId()
    {
        return $this->page_id;
    }

    public function getPriority()
    {
        return $this->priority;
    }

    public function getType()
    {
        return $this->type;
    }

    public function getTitle()
    {
        return $this->title;
    }

    public function getValue()
    {
        return $this->value;
    }

    public function getStatus()
    {
        return $this->status;
    }
}
